import { useState } from 'react';
import { useNavigate } from 'react-router-dom';

const FindVulnerabilityGame = ({ vulnerabilities, currentLevelId }) => {
    const [found, setFound] = useState([]);
    const [hint, setHint] = useState('');
    const [selectedType, setSelectedType] = useState('');
    const navigate = useNavigate();

    const handleCodeClick = (lineNumber) => {
        if (!selectedType) {
            setHint('Prvo odaberite vrstu ranjivosti');
            return;
        }

        const isCorrect = vulnerabilities.solutions.some(
            v => v.line === lineNumber && v.type === selectedType
        );

        if (isCorrect) {
            if (!found.some(f => f.line === lineNumber && f.type === selectedType)) {
                setFound([...found, { line: lineNumber, type: selectedType }]);
                setHint('✅ Točno! Pronašli ste ranjivost.');
            } else {
                setHint('ℹ Već ste označili ovu ranjivost');
            }
        } else {
            setHint('❌ Pogrešan odabir. Pokušajte ponovno.');
        }
    };

    return (
        <div className="p-6 bg-beige-50 rounded-lg shadow-lg">
            <h2 className="text-2xl font-bold text-purple-700 mb-4">Pronađite ranjivosti u kodu</h2>

            <div className="mb-6 p-4 bg-pink-50 rounded-lg border border-pink-200">
                <div className="font-mono text-sm text-pink-500">
                    {vulnerabilities.code.split('\n').map((line, i) => (
                        <div
                            key={i}
                            className={`p-1 hover:bg-pink-100 cursor-pointer ${found.some(f => f.line === i) ? 'bg-purple-100 border-l-4 border-purple-500' : ''}`}
                            onClick={() => handleCodeClick(i)}
                        >
                            <span className="text-purple-500 mr-4 w-6 inline-block">{i + 1}</span>
                            {line}
                        </div>
                    ))}
                </div>
            </div>

            <div className="mb-4">
                <h3 className="text-lg text-pink-700 mb-2">Odaberite vrstu ranjivosti:</h3>
                <div className="flex flex-wrap gap-2">
                    {vulnerabilities.types.map(type => (
                        <button
                            key={type}
                            className={`btn ${selectedType === type ? 'btn-primary bg-purple-600' : 'btn-outline'}`}
                            onClick={() => setSelectedType(type)}
                        >
                            {type}
                        </button>
                    ))}
                </div>
            </div>

            <div className={`alert ${hint.includes('❌') ? 'alert-error' : hint.includes('✅') ? 'alert-success' : 'alert-info'}`}>
                {hint || 'Odaberite vrstu ranjivosti i kliknite na sumnjivu liniju koda'}
            </div>

            <div className="progress bg-pink-200 mt-4">
                <div
                    className="progress-bar bg-purple-600"
                    style={{ width: `${(found.length / vulnerabilities.total) * 100}%` }}
                ></div>
            </div>
            <p className="text-right mt-1 text-pink-700">
                Pronađeno: {found.length}/{vulnerabilities.total}
            </p>
            {found.length == vulnerabilities.total && (
                navigate(`/donut-level/${currentLevelId}`)
            )}
        </div>
    );
};

export default FindVulnerabilityGame;